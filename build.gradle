apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'osgi'
apply plugin: 'nexus'

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7.1'
    }
}

group = 'de.measite.minidns'
description = "A minimal DNS client library with support for A, AAAA, NS and SRV records"
sourceCompatibility = 1.7
version = 'dev'
ext.isSnapshot = true

ext {
	minidnsMinAndroidSdk = 9
	androidBootClasspath = getAndroidRuntimeJar()
}

if (!ext.isSnapshot && 'git rev-parse --abbrev-ref HEAD'.execute().text.trim() == 'master') {
  throw new org.gradle.api.InvalidUserDataException('Untagged version detected! Please tag every release.')
}
if (version != 'dev' && version != 'git tag --points-at HEAD'.execute().text.trim()) {
  throw new org.gradle.api.InvalidUserDataException(
    'Tag mismatch detected, version is ' + version + ' but should be ' +
    'git tag --points-at HEAD'.execute().text.trim())
}

if (ext.isSnapshot) {
  version = version + '-SNAPSHOT'
}

repositories {
	mavenLocal()
	mavenCentral()
}

nexus {
    attachSources = true
    attachTests = false
    attachJavadoc = true
    sign = true
}

modifyPom {
    project {
        name 'minidns'
        description 'Minimal DNS library for java and android systems'
        url 'https://github.com/rtreffer/minidns'
        inceptionYear '2014'

        scm {
            url 'https://github.com/rtreffer/minidns'
            connection 'scm:https://github.com/rtreffer/minidns'
            developerConnection 'scm:git://github.com/rtreffer/minidns.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'rtreffer'
                name 'Rene Treffer'
                email 'treffer@measite.de'
            }
            developer {
                id 'flow'
                name 'Florian Schmaus'
                email 'flow@geekplace.eu'
            }
        }
    }
}

tasks.withType(JavaCompile) {
	// Some systems may not have set their platform default
	// converter to 'utf8', but we use unicode in our source
	// files. Therefore ensure that javac uses unicode
	options.encoding = "utf8"
	options.compilerArgs = [
		'-Xlint:all',
		'-Werror',
	]
}

dependencies {
    testCompile 'junit:junit:4.11'
}

task compileAndroid(type: JavaCompile) {
	source = compileJava.source
	classpath = compileJava.classpath
	destinationDir = new File(buildDir, 'android')
	options.bootClasspath = androidBootClasspath
}

test { dependsOn compileAndroid }

def getAndroidRuntimeJar() {
	def androidHome = getAndroidHome()
	def androidJar = new File("$androidHome/platforms/android-$minidnsMinAndroidSdk/android.jar")
	if (androidJar.isFile()) {
		return androidJar
	} else {
		throw new Exception("Can't find android.jar for $minidnsMinAndroidSdk API. Please install corresponding SDK platform package")
	}
}

def getAndroidHome() {
	def androidHomeEnv = System.getenv("ANDROID_HOME")
	if (androidHomeEnv == null) {
		throw new Exception("ANDROID_HOME environment variable is not set")
	}
	def androidHome = new File(androidHomeEnv)
	if (!androidHome.isDirectory()) throw new Exception("Environment variable ANDROID_HOME is not pointing to a directory")
	return androidHome
}
